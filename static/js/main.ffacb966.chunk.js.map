{"version":3,"sources":["store/ducks/checkDigit.js","components/CheckDigit.js","components/CheckDigit/Input.js","components/CheckDigit/Result.js","components/CheckDigit/hooks.js","theme.js","App.js","store/configureStore.js","reportWebVitals.js","index.js"],"names":["SET_DIGIT_VALUE","setInput","index","value","type","payload","initialState","checkDigitReducer","state","action","Array","map","val","useStyles","makeStyles","theme","form","justifyContent","title","textAlign","fontWeight","fontSize","wrapper","display","flexDirection","width","maxWidth","CheckDigit","classes","allInputs","useRef","dispatch","useDispatch","stateInputs","useSelector","checkDigit","inputLength","Object","keys","length","useEffect","current","querySelector","focus","onInput","onChange","e","target","undefined","isBackspace","key","isNaN","onKeyUp","currInput","setImmediate","onKeyDown","console","warn","className","component","container","x","i","input","refObj","el","margin","Input","props","tabIndex","ref","inputProps","min","max","result","Result","checkDigitResult","values","reduce","currValue","appendVal","push","num","multiplier","currVal","useCheckDigitResult","Typography","createMuiTheme","palette","mainContainer","alignItems","height","App","ThemeProvider","CssBaseline","Container","store","configureStore","reducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffacb966.chunk.js","sourcesContent":["const SET_DIGIT_VALUE = 'bm/checkDigit/SET_DIGIT_VALUE';\n\nexport function setInput(index, value) {\n    return {\n        type: SET_DIGIT_VALUE,\n        payload: { index, value },\n    }\n}\n\nconst inputLength = 8;\nconst initialState = {};\n[...Array(inputLength)].map((val, index) => initialState[index] = null);\n\nexport default function checkDigitReducer(state = initialState, action) {\n    switch (action.type) {\n        case SET_DIGIT_VALUE:\n            return {...state, [action.payload.index]: action.payload.value}\n        default:\n            return state\n    }\n}","import {useRef, useEffect} from 'react';\nimport {Grid, Typography} from '@material-ui/core';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Input from \"./CheckDigit/Input\";\nimport Result from \"./CheckDigit/Result\";\nimport {useSelector, useDispatch} from 'react-redux';\nimport {setInput} from '../store/ducks/checkDigit';\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        justifyContent: 'space-between'\n    },\n\n    title: {\n        textAlign: 'center',\n        fontWeight: 'bold',\n        fontSize: '32px'\n    },\n\n    wrapper: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        width: '500px',\n        maxWidth: '90%',\n    },\n}));\n\nfunction CheckDigit() {\n    const classes = useStyles();\n    const allInputs = useRef([]);\n    const dispatch = useDispatch();\n    const stateInputs = useSelector((state) => state.checkDigit)\n    const inputLength = Object.keys(stateInputs).length;\n\n    useEffect(() => {\n        allInputs.current[0]?.querySelector('input').focus();\n    }, [allInputs])\n\n    const onInput = (value, index) => {\n        if (!value) {\n            return;\n        }\n\n        // on any number input, except for last input- move to next input\n        if (index < (inputLength - 1)) {\n            allInputs.current[index + 1]?.querySelector('input').focus();\n        }\n\n        dispatch(setInput(index, value))\n    }\n\n    const onKeyUp = (value, index, isBackspace) => {\n        if (!isBackspace) { // we only handle backspace here\n            return;\n        }\n\n        // on backspace\n        if (stateInputs[index]) { // if there is a value in the field- just remove it from the state\n            dispatch(setInput(index, value));\n        } else { // if the user pressed backspace on an empty field- move focus back\n            allInputs.current[index - 1]?.querySelector('input').focus();\n        }\n    }\n\n    const onKeyDown = (target, index, isBackspace) => {\n        if (isBackspace) {\n            return;\n        }\n\n        const currInput = allInputs.current[index]?.querySelector('input');\n        // on multiple inserts in same field- set last number inserted to input\n        if (currInput.value) {\n            currInput.value = ''; // remove old value\n            // use setImmediate in order to have the value in `target.value`,\n            // otherwise the value is not populated yet\n            setImmediate(() => currInput.value = target.value % 10)\n        }\n    }\n\n    const onChange = (index, e) => {\n        const value = e.target.value || undefined;\n        const isBackspace = e.key === 'Backspace';\n\n        if (isNaN(value) && !isBackspace) {\n            return;\n        }\n\n        switch (e.type) {\n            case 'keyup':\n                onKeyUp(value, index, isBackspace);\n                break;\n            case 'keydown':\n                onKeyDown(e.target, index, isBackspace);\n                break;\n            case 'input':\n                onInput(e.target.value, index);\n                break;\n            default:\n                console.warn(`The event ${e.type} is not supported`)\n        }\n    }\n\n    return (\n        <div className={classes.wrapper}>\n\n            <Typography className={classes.title} component=\"h1\">Checking Digit Generator</Typography>\n\n            <Grid className={classes.form} container>\n                {[...Array(inputLength)].map((x, i) => {\n                        return (\n                            <Input className={classes.input}\n                                   index={i}\n                                   refObj={el => allInputs.current[i] = el}\n                                   onChange={onChange}\n                                   onInput={onInput}\n                                   key={i}/>\n                        )\n                    }\n                )}\n            </Grid>\n\n            <Result />\n        </div>\n    );\n}\n\nexport default CheckDigit;\n","import { Input as MUInput } from '@material-ui/core';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n    input: {\n        width: '40px',\n        maxWidth: 'calc(75vw / 8)',\n        fontSize: '40px',\n\n        '& input': {\n            textAlign: 'center',\n\n            '&::-webkit-inner-spin-button': {\n                '-webkit-appearance': 'none',\n                margin: 0,\n            },\n\n            '&::-webkit-outer-spin-button': {\n                '-webkit-appearance': 'none',\n                margin: 0\n            },\n        },\n    }\n}));\n\nfunction Input(props) {\n    const classes = useStyles();\n    const onChange = e => props.onChange(props.index, e);\n    return (\n        <MUInput className={classes.input}\n                 tabIndex={props.index}\n                 type='number'\n                 ref={props.refObj}\n                 onKeyUp={onChange}\n                 onKeyDown={onChange}\n                 onInput={onChange}\n                 inputProps={{\n                     min: '0',\n                     max: '9',\n                 }} />\n    )\n}\n\nexport default Input;","import {Typography} from '@material-ui/core';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {useCheckDigitResult} from './hooks'\n\nconst useStyles = makeStyles((theme) => ({\n    result: {\n        textAlign: 'center',\n        margin: '20px 0 0',\n        fontSize: '28px',\n        fontWeight: 'bold',\n    }\n}));\n\nfunction Result() {\n    const classes = useStyles();\n    const checkDigitResult = useCheckDigitResult();\n\n    return (\n        <Typography className={classes.result} component=\"p\">{checkDigitResult}</Typography>\n    );\n}\n\nexport default Result;\n","import {useSelector} from 'react-redux';\n\nexport function useCheckDigitResult() {\n    const stateInputs = useSelector((state) => state.checkDigit)\n\n    const id = Object.values(stateInputs).reduce((result, currValue) => {\n        const appendVal = isNaN(currValue) || currValue === null ? 0 : currValue;\n        result.push(appendVal);\n        return result;\n    }, []);\n\n    const sums = id.map((num, index) => {\n        let multiplier = 2;\n        if ((index % 2) === 0) {\n            multiplier = 1;\n        }\n\n        return num * multiplier;\n    });\n\n    const finalSum = sums.reduce((result, currVal) => {\n        return result + (currVal > 9 ? currVal - 9 : currVal);\n    }, 0)\n\n    return ((10 - (finalSum % 10)) % 10);\n}","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark'\n    },\n});\n\nexport default theme;","import {ThemeProvider, makeStyles} from '@material-ui/core/styles';\nimport {Container, CssBaseline} from '@material-ui/core';\nimport theme from \"./theme\";\nimport CheckDigit from \"./components/CheckDigit\";\n\nconst useStyles = makeStyles((theme) => ({\n    mainContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh',\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline>\n                <Container className={classes.mainContainer} component='main'>\n                    <CheckDigit />\n                </Container>\n            </CssBaseline>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\nimport checkDigitReducer from './ducks/checkDigit'\n\nconst store = configureStore({\n    reducer: {\n        checkDigit: checkDigitReducer\n    },\n})\n\nexport default store","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store/configureStore'\nimport { Provider } from 'react-redux'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}